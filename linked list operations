

#include <stdio.h>
int main()
{
int i, low, high, mid, n, key, array[100];
printf("Enter number of elementsn");
scanf("%d",&n);
printf("Enter %d integersn", n);butor
69 lines (56 sloc)  1.3 KB

#include <stdio.h>
#include <stdlib.h>
  struct node {
    int data;
    struct node* left;
    struct node* right;
};
 struct node* newNode(int data)
{
    struct node* node
        = (struct node*)malloc(sizeof(struct node));
    node->data = data;
    node->left = NULL;
    node->right = NULL;
  
    return (node);
}
  void printPostorder(struct node* node)
{
    if (node == NULL)
        return;
  
    
    printPostorder(node->left);
  
 
    printPostorder(node->right);
  
   
    printf("%d ", node->data);
}
  void printInorder(struct node* node)
{
    if (node == NULL)
        return;
  printInorder(node->left);
  printf("%d ", node->data);
   printInorder(node->right);
}
void printPreorder(struct node* node)
{
    if (node == NULL)
        return;
    printf("%d ", node->data);
  printPreorder(node->left);
	printPreorder(node->right);
}
  

int main()
{
    struct node* root = newNode(1);
    root->left = newNode(2);
    root->right = newNode(3);
    root->left->left = newNode(4);
    root->left->right = newNode(5);
  
    printf("\nPreorder traversal of binary tree is \n");
    printPreorder(root);
  
    printf("\nInorder traversal of binary tree is \n");
    printInorder(root);
  
    printf("\nPostorder traversal of binary tree is \n");
    printPostorder(root);
  
    getchar();
    return 0;
for(i = 0; i < n; i++)
scanf("%d",&array[i]);
printf("Enter value to findn");
scanf("%d", &key);
low = 0;
high = n - 1;
mid = (low+high)/2;
while (low <= high) {
if(array[mid] < key)
low = mid + 1;
else if (array[mid] == key) {
printf("%d found at location %d.n", key, mid+1);
break;
}
else
high = mid - 1;
mid = (low + high)/2;
}
if(low > high)
printf("Not found! %d isn't present in the list.n", key);
return 0;
}
